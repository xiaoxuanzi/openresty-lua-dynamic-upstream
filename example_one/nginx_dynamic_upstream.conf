user  root;
worker_processes  1;
pid        logs/ngx_dy_upst_file.pid;
events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    sendfile        on;
    keepalive_timeout  65;
    lua_shared_dict upstreams 1m;

    upstream default_upstream {
        server 127.0.0.1:8081;
        server 127.0.0.1:8082;
    }

    upstream lua_upstream {
        server 127.0.0.1:8084;
        server 127.0.0.1:8083;
    }

    init_by_lua_block {
            local dy_chose_upst = require "dy_chose_upst_file"
            dy_chose_upst.init_upstream()
    }

    server {
        listen       80;
        server_name  localhost;

        access_log  logs/80.access.log  main;
        error_log   logs/80.error.log error;

        location = /_switch_upstream {
            content_by_lua_block {
                    local dy_chose_upst = require "dy_chose_upst_file"
                    dy_chose_upst.choose_upstream()
            }
        }

        location / {
            set_by_lua_block $my_upstream {
                ngx.log(ngx.ERR, "http_host: ", ngx.var.http_host)
                local ups = ngx.shared.upstreams:get("selected_upstream")
                if ups ~= nil then
                    ngx.log(ngx.ERR, "get [", ups,"] from ngx.shared")
                    return ups
                end
                return "default_upstream"
            }

            #proxy_next_upstream off;
            proxy_set_header    X-Real-IP           $remote_addr;
            proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
            proxy_set_header    Host                $host;
            proxy_http_version  1.1;
            proxy_set_header    Connection  "";
            proxy_pass          http://$my_upstream ;
        }
    }   

    server {
        listen       8081;
        server_name  localhost;

        location / {
            root   html81;
            index  index.html index.htm;
        }
    }

    server {
        listen       8082;
        server_name  localhost;

        location / {
            root   html82;
            index  index.html index.htm;
        }
    }

    server {
        listen       8083;
        server_name  localhost;

        location / {
            root   html83;
            index  index.html index.htm;
        }
    }

    server {
        listen       8084;
        server_name  localhost;

        location / {
            root   html84;
            index  index.html index.htm;
        }
    }
}
